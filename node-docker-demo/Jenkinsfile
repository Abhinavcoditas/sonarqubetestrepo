def buildNumber = BUILD_NUMBER as int
if (buildNumber > 1) milestone(buildNumber - 1)
milestone(buildNumber)

pipeline {
  agent any
  
  environment {
    CI_COMMIT_SHA = "$GIT_COMMIT"
  }

  stages {
    
    //  stage('SonarQube main Build') {
    //   steps {
    //       script {
    //         def scannerOutput = sh (
    //           script: 'sonar-scanner -D sonar.projectKey=sonatrivy -D sonar.sources=. -D sonar.host.url=http://192.168.1.5:9000 -D sonar.token=sqp_90c406f394c2711e71ba4d3edc2352a12dbbde58',
    //           returnStdout: true
    //         ).trim()
            
    //         echo "SonarQube Scanner Output:"
    //         echo scannerOutput
            
    //         if (scannerOutput.contains('INFO: EXECUTION FAILED')) {
    //           error "SonarQube scan execution failed"
    //       }
    //     }
    //   }
    // } 
    
    stage('Image Build') {
      steps {
        sh '''
          aws configure set aws_access_key_id "AKIATQBXFCLVBOLHZBGE"; aws configure set aws_secret_access_key "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"; aws configure set default.region "ap-south-1"
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 240633844458.dkr.ecr.ap-south-1.amazonaws.com
          docker build -t "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA" -f node-docker-demo/Dockerfile .
          '''
      }
    }
    stage('Trivy Scanning') {
      steps {

        script {
            def output = sh(script: 'trivy image "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA"', returnStdout: true).trim()

            // Extract counts for each severity level
            def criticalCount = output =~ /CRITICAL: (\d+)/
            def highCount = output =~ /HIGH: (\d+)/
            def mediumCount = output =~ /MEDIUM: (\d+)/
            def lowCount = output =~ /LOW: (\d+)/
            def unknownCount = output =~ /UNKNOWN: (\d+)/

            // Convert match results to integers
            def critical = criticalCount ? criticalCount[0][1] as Integer : 0
            def high = highCount ? highCount[0][1] as Integer : 0
            def medium = mediumCount ? mediumCount[0][1] as Integer : 0
            def low = lowCount ? lowCount[0][1] as Integer : 0
            def unknown = unknownCount ? unknownCount[0][1] as Integer : 0

            // Check if any severity level exceeds the threshold
            if (critical >= 1 || high >= 1 || medium >= 3 || low >= 5) {
                error "Pipeline failed: Too many vulnerabilities - CRITICAL: ${critical}, HIGH: ${high}, MEDIUM: ${medium}, LOW: ${low}, UNKNOWN: ${unknown}"
            } else {
                println "Pipeline continues: Critical: ${critical}, High: ${high}, Medium: ${medium}, Low: ${low}, Unknown: ${unknown}"
            }
        }

      }
    }
    // stage('Manual Confirmation') {
    //   steps {
    //     script {
    //       input(message: 'Do you want to proceed with pushing the image to ECR?', submitter: 'user')
    //     }
    //   }
    // }
    // stage('Image push') {
    //   steps {
    //     sh '''
    //       docker push "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA"
    //     '''
    //   }
    // }
  }
}

