def buildNumber = BUILD_NUMBER as int
if (buildNumber > 1) milestone(buildNumber - 1)
milestone(buildNumber)

pipeline {
  agent any
  
  environment {
    CI_COMMIT_SHA = "$GIT_COMMIT"
  }

  stages {
    
    //  stage('SonarQube main Build') {
    //   steps {
    //       script {
    //         def scannerOutput = sh (
    //           script: 'sonar-scanner -D sonar.projectKey=sonatrivy -D sonar.sources=. -D sonar.host.url=http://192.168.1.5:9000 -D sonar.token=sqp_90c406f394c2711e71ba4d3edc2352a12dbbde58',
    //           returnStdout: true
    //         ).trim()
            
    //         echo "SonarQube Scanner Output:"
    //         echo scannerOutput
            
    //         if (scannerOutput.contains('INFO: EXECUTION FAILED')) {
    //           error "SonarQube scan execution failed"
    //       }
    //     }
    //   }
    // } 
    
    stage('Image Build') {
      steps {
        sh '''
          aws configure set aws_access_key_id "AKIATQBXFCLVBOLHZBGE"; aws configure set aws_secret_access_key "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"; aws configure set default.region "ap-south-1"
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 240633844458.dkr.ecr.ap-south-1.amazonaws.com
          docker build -t "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA" -f node-docker-demo/Dockerfile .
          '''
      }
    }
    stage('Trivy Scanning') {
      steps {

        script {
                    // Execute Trivy scan on the Docker image
                    TRIVY_EXIT_CODE = sh(returnStatus: true, script: 'trivy --severity CRITICAL --format json 240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA || true').trim()
                    if (TRIVY_EXIT_CODE == 0) {
                        def trivyOutput = sh(script: 'trivy --severity CRITICAL --format json 240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA', returnStdout: true).trim()
                        def vulnerabilities = readJSON text: trivyOutput
                        CRITICAL_VULNS_COUNT = vulnerabilities.size()
                    }
                }

      }
    }
    // stage('Manual Confirmation') {
    //   steps {
    //     script {
    //       input(message: 'Do you want to proceed with pushing the image to ECR?', submitter: 'user')
    //     }
    //   }
    // }
    // stage('Image push') {
    //   steps {
    //     sh '''
    //       docker push "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA"
    //     '''
    //   }
    // }
  }
  post {
        always {
            script {
                // Fail build if critical vulnerabilities are found
                if (CRITICAL_VULNS_COUNT >= 1000) {
                    error "Too many critical vulnerabilities (${CRITICAL_VULNS_COUNT}) found. Build failed."
                }
            }
        }
    }
}

