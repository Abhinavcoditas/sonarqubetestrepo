def buildNumber = BUILD_NUMBER as int
if (buildNumber > 1) milestone(buildNumber - 1)
milestone(buildNumber)

pipeline {
  agent any
  stages {
    stage('SonarQube main Build') {
      steps {
          script {
            def scannerOutput = sh (
              script: 'sonar-scanner -D sonar.projectKey=sonatrivy -D sonar.sources=. -D sonar.host.url=http://192.168.3.132:9000 -D sonar.token=sqp_90c406f394c2711e71ba4d3edc2352a12dbbde58',
              returnStdout: true
            ).trim()
            
            echo "SonarQube Scanner Output:"
            echo scannerOutput
            
            if (scannerOutput.contains('INFO: EXECUTION FAILED')) {
              error "SonarQube scan execution failed"
          }
        }
      }
    }
  }
  stages {
    stage('Image Build and push') {
      steps {
          aws configure set aws_access_key_id AKIATQBXFCLVBOLHZBGE; aws configure set aws_secret_access_key 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; aws configure set default.region ap-south-1
          docker build -t sonatrivytest:$CI_COMMIT_SHA -f sonatrivytest/Dockerfile .
          docker push sonatrivytest:$CI_COMMIT_SHA
      }
    }
  }
}
