def buildNumber = BUILD_NUMBER as int
if (buildNumber > 1) milestone(buildNumber - 1)
milestone(buildNumber)

pipeline {
  agent any
  
  environment {
    CI_COMMIT_SHA = "$GIT_COMMIT"
  }

  stages {
    
    /* stage('SonarQube main Build') {
      steps {
          script {
            def scannerOutput = sh (
              script: 'sonar-scanner -D sonar.projectKey=sonatrivy -D sonar.sources=. -D sonar.host.url=http://192.168.3.132:9000 -D sonar.token=sqp_90c406f394c2711e71ba4d3edc2352a12dbbde58',
              returnStdout: true
            ).trim()
            
            echo "SonarQube Scanner Output:"
            echo scannerOutput
            
            if (scannerOutput.contains('INFO: EXECUTION FAILED')) {
              error "SonarQube scan execution failed"
          }
        }
      }
    } */
    
    stage('Image Build') {
      steps {
        sh '''
          aws configure set aws_access_key_id "AKIATQBXFCLVBOLHZBGE"; aws configure set aws_secret_access_key "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"; aws configure set default.region "ap-south-1"
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 240633844458.dkr.ecr.ap-south-1.amazonaws.com
          docker build -t "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA" -f node-docker-demo/Dockerfile .
          '''
      }
    }
    stage('Trivy Scanning') {
      steps {
        script {
          def trivyOutput = sh(script: 'trivy image --format json "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA"', returnStdout: true).trim()
          echo "Trivy Output:"
          echo trivyOutput
          // Parse Trivy output to categorize vulnerabilities
                        def jsonSlurper = new groovy.json.JsonSlurper()
                        def vulnerabilities = jsonSlurper.parseText(trivyOutput)
                        
                        // Initialize counters for each severity
                        def lowCount = 0
                        def mediumCount = 0
                        def highCount = 0
                        def criticalCount = 0
                        
                        // Count vulnerabilities by severity
                        vulnerabilities.each { vuln ->
                            def severity = vuln.Severity.toUpperCase()
                            switch (severity) {
                                case 'LOW':
                                    lowCount++
                                    break
                                case 'MEDIUM':
                                    mediumCount++
                                    break
                                case 'HIGH':
                                    highCount++
                                    break
                                case 'CRITICAL':
                                    criticalCount++
                                    break
                                default:
                                    // Handle unknown severity
                                    break
                            }
                        }
                        
                        // Print counts of vulnerabilities by severity
                        echo "Total number of vulnerabilities found: ${vulnerabilities.size()}"
                        echo "Low Severity: ${lowCount}"
                        echo "Medium Severity: ${mediumCount}"
                        echo "High Severity: ${highCount}"
                        echo "Critical Severity: ${criticalCount}"
          }
        }
      }
    stage('Manual Confirmation') {
      steps {
        script {
          input(message: 'Do you want to proceed with pushing the image to ECR?', submitter: 'user')
        }
      }
    }
    stage('Image push') {
      steps {
        sh '''
          docker push "240633844458.dkr.ecr.ap-south-1.amazonaws.com/sonatrivytest:$CI_COMMIT_SHA"
        '''
      }
    }
  }
  }

