def buildNumber = BUILD_NUMBER as int
if (buildNumber > 1) milestone(buildNumber - 1)
milestone(buildNumber)

pipeline {
  agent any
  
  environment {
    CI_COMMIT_SHA = "$GIT_BRANCH" + "_$GIT_COMMIT"
  }

  stages {
    stage('SonarQube main Build') {
      steps {
          script {
            def scannerOutput = sh (
              script: 'sonar-scanner -D sonar.projectKey=sonatrivy -D sonar.sources=. -D sonar.host.url=http://192.168.3.132:9000 -D sonar.token=sqp_90c406f394c2711e71ba4d3edc2352a12dbbde58',
              returnStdout: true
            ).trim()
            
            echo "SonarQube Scanner Output:"
            echo scannerOutput
            
            if (scannerOutput.contains('INFO: EXECUTION FAILED')) {
              error "SonarQube scan execution failed"
          }
        }
      }
    }
    stage('Image Build') {
      steps {
        sh '''
          aws configure set aws_access_key_id "AKIATQBXFCLVBOLHZBGE"; aws configure set aws_secret_access_key "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"; aws configure set default.region "ap-south-1"
          docker build -t sonatrivytest:$CI_COMMIT_SHA -f sonatrivytest/Dockerfile .
          
          '''
      }
    }
    stage('Trivy Scanning') {
      steps {
        sh '''
          trivy image --format json --output result.json sonatrivytest:$CI_COMMIT_SHA
        '''
        script {
          def trivyResult = readFile 'result.json'
          def json = new groovy.json.JsonSlurper().parseText(trivyResult)
          
          def lowCount = json.Vulnerabilities.findAll { it.Severity == 'LOW' }.size()
          def mediumCount = json.Vulnerabilities.findAll { it.Severity == 'MEDIUM' }.size()
          def highCount = json.Vulnerabilities.findAll { it.Severity == 'HIGH' }.size()
          def criticalCount = json.Vulnerabilities.findAll { it.Severity == 'CRITICAL' }.size()
          
          if (lowCount > 5 || mediumCount > 3 || highCount > 0 || criticalCount > 0) {
            error "Vulnerabilities found: Low - ${lowCount}, Medium - ${mediumCount}, High - ${highCount}, Critical - ${criticalCount}"
          }
        }
      }
    }
    stage('Image push') {
      steps {
        sh '''
          docker push sonatrivytest:$CI_COMMIT_SHA
        '''
      }
    }
    //post{
      //always{
        //  mail to: "${GIT_COMMIT_EMAIL}",cc: "abhinav.dadhich@coditas.com",
          //subject: "Your Pipeline Status For ${JOB_NAME}",
          //body: "Jenkins Build For Job ${env.JOB_NAME} is ${currentBuild.currentResult}:, You can Find More Info. at ${env.BUILD_URL}"
      //}
    //}
  }
}
